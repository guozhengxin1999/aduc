amends "https://raw.githubusercontent.com/UIBK-DPS-DC/Cirrina-Specifications/main/pkl/CollaborativeStateMachineDescription.pkl"
import "https://raw.githubusercontent.com/UIBK-DPS-DC/Cirrina-Specifications/main/pkl/CollaborativeStateMachineDescription.pkl" as CSM

// ------------------------ CSM -------------------------------
name = "Accident Detect System"
version = "2.0"
stateMachines {
    pressureSM
    cloudAnalysisSM
}

// ------------------------ Service Types -------------------------------
local stPreprocess = "preprocess"
local stDetectAbnormalPressure = "detectAbnormalPressure"
local stRecordAbnormalPressure = "recordAbnormalPressure"
local stNotificationSent = "notificationSent"

local stDeepAnalysis = "deepAnalysis"
local stAlarm = "alarm"


// ------------------------ Events -------------------------------
local ePreprocessed = "preprocessed"
local eDetectedPressure = "detectedPressure"
local eFoundAbnormal = "foundAbnormal"
local eRecord = "record"
local eNotify = "notify"

local eAnalyzed = "analyzed"
local eAlarm = "alarm"

// ------------------------ Variables -------------------------------
local vHasDetectedPressure = "hasDetectedPressure"

local vHasThreat = "hasThreat"

// ------------------------ ContextVariableDescriptions -------------------------------
local pressureContextVariableDescription: CSM.ContextVariableDescription = new {
    name = "pressureData"
    value = "pressureData"
}

// ------------------------ Pressure SM -------------------------------
local pressureSM: CSM.StateMachineDescription = new {
    name = "pressure"
    localContext {
        variables {
            new {
                name = "pressureData"
                value = "''"
            }
            new {
                name = vHasDetectedPressure
                value = "false"
            }
        }
    }
    states {
        sPreprocess
        sDetection
    }
    stateMachines {
        sAbnormalStateMachine
    }
}

local sPreprocess: CSM.StateDescription = new {
    name = "preprocess"
    initial = true
    entry {
        new CSM.InvokeActionDescription {
            serviceType = stPreprocess
             input {
                new {
                    name = "pressureData"
                    value = "1"
                }
            }
            output {
                new {
                    reference = "pressureData"
                }
            }
            done {
                new {
                    name = ePreprocessed
                    channel = "internal"
                }
            }
        }
    }
    on {
        new {
            event = ePreprocessed
            target = sAbnormalStateMachine.name
        }
    }
}

local sDetection: CSM.StateDescription = new {
    name = "Detection"
    entry {
        new CSM.InvokeActionDescription {
            serviceType = stDetectAbnormalPressure
            isLocal = true
            input {
                pressureContextVariableDescription
            }
            output {
                new {
                    reference = vHasDetectedPressure
                }
            }
            done {
                new {
                    name = eDetectedPressure
                    channel = "internal"
                }
            }
        }
    }
    on {
        new {
            event = eDetectedPressure
            guards {
                new CSM.GuardDescription{
                    expression = "\(vHasDetectedPressure) == true"
                }
            }
            actions {
                new CSM.RaiseActionDescription{
                    event{
                        name = eFoundAbnormal
                        channel = "global"
                        data {
                            pressureContextVariableDescription
                        }
                    }
                }
            }
        }
         new {
             event = ePreprocessed
             target = sPreprocess.name
         }
         new {
            event = eRecord
            target = sAbnormalStateMachine.name
         }
    }
}

local sAbnormalStateMachine: CSM.StateMachineDescription = new {
    name = "AbnormalStateMachine"
    states {
        sRecording
        sNotification
    }
}

local sRecording: CSM.StateDescription = new {
    name = "Recording"
    initial = true
    on {
        new {
            event = eFoundAbnormal
            actions {
                new CSM.InvokeActionDescription {
                    serviceType = stRecordAbnormalPressure
                    done {
                        new {
                            name = eNotify
                            channel = "internal"
                        }
                    }
                }
            }
        }
        new{
            event = eNotify
            target = sNotification.name
        }
    }
}

local sNotification: CSM.StateDescription = new {
    name = "Notification"
      entry {
        new CSM.InvokeActionDescription {
            serviceType = stNotificationSent
        }
    }
     on {
        new {
            event = eNotify
            target = sRecording.name
        }
    }


}

// ------------------------ Cloud Analysis SM -------------------------------
local cloudAnalysisSM: CSM.StateMachineDescription = new {
    name = "cloudAnalysis"
    localContext {
        variables {
            new {
                name = vHasThreat
                value = "false"
            }
        }
    }
    states {
        sProcessing
        sAlarm
    }
}

local sProcessing: CSM.StateDescription = new {
    name = "Processing"
    initial = true
    on {
        new {
            event = eFoundAbnormal
            actions {
                new CSM.InvokeActionDescription {
                    serviceType = stDeepAnalysis
                    input {
                        new {
                            name = "pressure"
                            value = "$pressureData"
                        }
                    }
                    output {
                        new {
                            reference =vHasThreat
                        }
                    }
                    done {
                        new {
                            name = eAnalyzed
                            channel = "internal"
                        }
                    }
                }
            }
        }
        new {
            event = eAnalyzed
            guards {
                new CSM.GuardDescription {
                    expression = "\(vHasThreat) == true"
                }
            }
            actions {
                new CSM.RaiseActionDescription {
                    event {
                        name = eAlarm
                        channel = "global"
                    }
                }
            }
        }
        new{
            event = eAlarm
            target = sAlarm.name
        }
    }
}

local sAlarm: CSM.StateDescription = new {
    name = "alarm"
    on {
        new {
            event = eAlarm
            target = sPreprocess.name
        }
    }

}