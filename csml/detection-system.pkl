amends "https://raw.githubusercontent.com/UIBK-DPS-DC/Cirrina-Specifications/main/pkl/CollaborativeStateMachineDescription.pkl"
import "https://raw.githubusercontent.com/UIBK-DPS-DC/Cirrina-Specifications/main/pkl/CollaborativeStateMachineDescription.pkl" as CSM

// ------------------------ CSM -------------------------------
name = "Accident Detect System"
version = "2.0"
stateMachines {
    pressureSM
    cloudAnalysisSM
}

// ------------------------ Service Types -------------------------------
local stPreprocess = "preprocess"
local stDetectAbnormalPressure = "detectAbnormalPressure"
local stRecordAbnormalPressure = "recordAbnormalPressure"
local stNotificationSent = "notificationSent"

local stDeepAnalysis = "deepAnalysis"


// ------------------------ Events -------------------------------
local ePreprocessed = "preprocessed"
local eDetectedPressure = "detectedPressure"
local eFoundAbnormal = "foundAbnormal"
local eRecord = "record"
local eNeedRecord = "needRecord"

local eNotify = "notify"
local eNofityDone = "notifyDone"

local eAnalyzed = "analyzed"
local eAlarm = "alarm"

// ------------------------ Variables -------------------------------
local vHasDetectedPressure = "hasDetectedPressure"

local vHasThreat = "hasThreat"

// ------------------------ ContextVariableDescriptions -------------------------------
local pressureContextVariableDescription: CSM.ContextVariableDescription = new {
    name = "pressureData"
    value = "pressureData"
}

// ------------------------ Pressure SM -------------------------------
local pressureSM: CSM.StateMachineDescription = new {
    name = "pressure"
    localContext {
        variables {
            new {
                name = "pressureData"
                value = "''"
            }
            new {
                name = vHasDetectedPressure
                value = "false"
            }
        }
    }
    states {
        sPreprocess
        sDetection
    }
    stateMachines {
        sAbnormalStateMachine
    }
}

local sPreprocess: CSM.StateDescription = new {
    name = "preprocess"
    initial = true
    entry {
        new CSM.InvokeActionDescription {
            serviceType = stPreprocess
             input {
                new {
                    name = "fileNumber"
                    value = "1"
                }
            }
            output {
                new {
                    reference = "pressureData"
                }
            }
            done {
                new {
                    name = ePreprocessed
                    channel = "internal"
                }
            }
        }
    }
    on {
        new {
            event = ePreprocessed
            target = sDetection.name
        }
    }
}

local sDetection: CSM.StateDescription = new {
    name = "detection"
    entry {
        new CSM.InvokeActionDescription {
            serviceType = stDetectAbnormalPressure
            isLocal = true
            input {
                pressureContextVariableDescription
            }
            output {
                new {
                    reference = vHasDetectedPressure
                }
            }
            done {
                new {
                    name = eDetectedPressure
                    channel = "internal"
                }
                new {
                    name = eNeedRecord
                    channel = "internal"
                }
            }
        }
    }
    on {
        new {
            event = eDetectedPressure
            guards {
                new CSM.GuardDescription{
                    expression = "\(vHasDetectedPressure) == true"
                }
            }
            actions {
                new CSM.RaiseActionDescription{
                    event{
                        name = eFoundAbnormal
                        channel = "global"
//                         data {
//                             pressureContextVariableDescription
//                         }
                    }
                }
            }
        }
        new {
            event = eNeedRecord
            guards {
                new CSM.GuardDescription{
                    expression = "\(vHasDetectedPressure) == true"
                }
            }
            actions {
                new CSM.RaiseActionDescription{
                    event{
                        name = eRecord
                        channel = "global"
                    }
                }
            }
        }
    }
}

local sAbnormalStateMachine: CSM.StateMachineDescription = new {
    name = "abnormalStateMachine"
    states {
        sRecording
        sNotification
    }
}

local sRecording: CSM.StateDescription = new {
    name = "recording"
    initial = true
    on {
        new {
            event = eRecord
            actions {
                 new CSM.InvokeActionDescription {
                     serviceType = stRecordAbnormalPressure
                 }
            }
            target = sNotification.name
        }
    }
}


local sNotification: CSM.StateDescription = new {
    name = "notification"
      on {
          new {
              event = eNotify
              actions {
                  new CSM.InvokeActionDescription {
                      serviceType = stNotificationSent
                  }
              }
              target = sRecording.name
          }
    }
}

// ------------------------ Cloud Analysis SM -------------------------------
local cloudAnalysisSM: CSM.StateMachineDescription = new {
    name = "cloud"
    localContext {
        variables {
            new {
                name = vHasThreat
                value = "false"
            }
        }
    }
    states {
        sProcessing
        sAlarm
    }
}

local sProcessing: CSM.StateDescription = new {
    name = "processing"
    initial = true
    on {
        new {
            event = eFoundAbnormal
            actions {
                new CSM.InvokeActionDescription {
                    serviceType = stDeepAnalysis
//                     input {
//                         pressureContextVariableDescription
//                     }
//                     output {
//                         new {
//                             reference =vHasThreat
//                         }
//                     }
                    done {
                        new {
                            name = eAnalyzed
                            channel = "internal"
                        }
                    }
                }
            }
        }
        new {
            event = eAnalyzed
//             guards {
//                 new CSM.GuardDescription {
//                     expression = "\(vHasThreat) == true"
//                 }
//             }
            actions {
                new CSM.RaiseActionDescription {
                    event {
                        name = eAlarm
                        channel = "internal"
                    }
                }
            }
        }
        new {
            event = eAlarm
            target = sAlarm.name
        }
    }
}

local sAlarm: CSM.StateDescription = new {
    name = "alarm"
    on {
        new {
            event = eAlarm
            target = sProcessing.name
        }
    }
}