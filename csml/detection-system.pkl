amends "https://raw.githubusercontent.com/UIBK-DPS-DC/Cirrina-Specifications/main/pkl/CollaborativeStateMachineDescription.pkl"
import "https://raw.githubusercontent.com/UIBK-DPS-DC/Cirrina-Specifications/main/pkl/CollaborativeStateMachineDescription.pkl" as CSM

// ------------------------ CSM -------------------------------
name = "Multi-Sensor Accident Detect System"
version = "2.0"
stateMachines {
    VideoSM
    AudioSM
//     TemperatureSM
//     SeatSM
//     AirbagSM
//     DoorSM
    SensorFusionSM

    rescueCoordinatorSM
    vehicleCommSM
    emergencyOpsSM
}


// ------ service Type ------
// video st
local stProcessVideo = "processVideo"
local stVideoDetectAngle = "videoDetectAngle"
local stVideoDetectSmoke = "videoDetectSmoke"
local stVideoDetectCollision = "videoDetectCollision"
local stVideoDetectPassenger = "videoDetectPassenger"
// audio st
local stProcessAudio = "processAudio"
local stAudioDetectCollision = "audioDetectCollision"
local stAudioDetectPassenger = "audioDetectPassenger"
//temperature st
local stReadTemperature = "readTemperature"
local stAnalyzeTemperature = "analyzeTemperature"

//seat st
local stReadSeat = "readSeat"
local stCheckSeatPressure = "checkSeatPressure"

//airbag st
local stReadAirbag = "readAirbag"
local stDetectAirbag = "detectAirbag"

//door st
local stReadDoor = "readDoor"
local stMonitorDoors = "monitorDoors"


// department
local stFireDepartment = "fireDepartment"
local stHospitalDepartment = "hospitalDepartment"
local stPolice = "police"

// vtov
local stVToVCommunication = "vToVCommunication"
local stUnlockDoors = "unlockDoors"
local stDisconnectPower = "disconnectPower"
local stGuidanceRescue = "guidanceRescue"

// ===== Event =====
// ----- video -----
local eVideoAngle = "videoAngle"
local eVADetectAbnormal = "vADetectAbnormal"
local eVideoSmoke = "videoSmoke"
local eVSDetectAbnormal = "vSDetectAbnormal"
local eVideoCollision = "videoCollision"
local eVCDetectAbnormal = "vCDetectAbnormal"
local eVideoPassenger = "videoPassenger"
local eVPDetectAbnormal = "vPDetectAbnormal"
// ----- audio -----
local eAudioCollision = "audioCollision"
local eACDetectAbnormal = "aCDetectAbnormal"
local eAudioPassenger = "audioPassenger"
local eAPDetectAbnormal = "aPDetectAbnormal"


// ----- accident catagories -----
local eFireDetected = "fireDetected"
local eCollisionConfirmed = "collisionConfirmed"
local eRolloverRisk = "rolloverRisk"
local eOccupancyInjured = "occupancyInjured"

local eThermalCritical = "thermalCritical"
local eSeatOccupancy = "seatOccupancy"
local eAirbagActivated = "airbagActivated"
local eDoorCompromised = "doorCompromised"
local eAccidentConfirmed = "accidentConfirmed"
local eEmergencyTrigger = "emergencyTrigger"
local eV2XMessageSent = "v2xMessageSent"


local eCollision = "collision"
local eRollover = "rollover"
local eFire = "fire"
local eOccupantsUpdated = "occupantsUpdated"
local eDoorsUnlocked = "doorsUnlocked"
local eBroadcastSent = "broadcastSent"
local eSensorTimeout = "sensorTimeout"
local eFalseAlarm = "falseAlarm"

// ===== varibales =====
// ----- video -----
local vVideoAngle = "videoAngle"
local vVideoSmoke = "videoSmoke"
local vVideoCollision = "videoCollision"
local vVideoPassenger = "videoPassenger"
// ----- audio -----
local vAudioCollision = "audioCollision"
local vAudioPassenger = "audioPassenger"
// ----- temperature -----


local vRolloverAngle = "rolloverAngle"
local vCrashConfidence = "crashConfidence"
local vOccupantCount = "occupantCount"
local vVehicleLocation = "vehicleLocation"
local vDoorStatus = "doorStatus"
local vAmbientTemp = "ambientTemp"

// =====ContextVariableDescriptions =====
local videoContextVariableDescription: CSM.ContextVariableDescription = new {
    name = "videoData"
    value = "videoData"
}
local videoPassengerContextVariableDescription: CSM.ContextVariableDescription = new {
    name = "videoPassenger"
    value = "videoPassengerData"
}
local audioContextVariableDescription: CSM.ContextVariableDescription = new {
    name = "audioData"
    value = "audioData"
}
local audioPassengerContextVariableDescription: CSM.ContextVariableDescription = new {
    name = "audioPassenger"
    value = "audioPassengerData"
}
local temperatureContextVariableDescription: CSM.ContextVariableDescription = new {
    name = "temperatureData"
    value = "temperatureData"
}
local airbagContextVariableDescription: CSM.ContextVariableDescription = new {
    name = "airbagData"
    value = "airbagData"
}
local doorContextVariableDescription: CSM.ContextVariableDescription = new {
    name = "doorData"
    value = "doorData"
}
local seatContextVariableDescription: CSM.ContextVariableDescription = new {
    name = "seatData"
    value = "seatData"
}

// ===== camera SM  =====
local VideoSM: CSM.StateMachineDescription = new {
    name = "video"
    localContext {
        variables {
            new {
                name = "videoData"
                value = "''"
            }
            new {
                name = "videoAngle"
                value = "false"
            }
            new {
                name =  "videoSmoke"
                value = "false"
            }
            new {
                name = "videoCollision"
                value = "false"
            }
            new {
                name = "videoPassenger"
                value = "0"
            }
        }
    }
    states {
        sReadVideo
        sVideoDetectAngle
        sVideoDetectSmoke
        sVideoDetectCollison
        sVideoDetectPassenger
    }
}

local sReadVideo: CSM.StateDescription = new {
    name = "readVideo"
    initial = true
    entry {
        new CSM.InvokeActionDescription {
            serviceType = stProcessVideo
            input {
                new {
                    name = "fileNumber"
                    value = "1"
                }
            }
            output {
                new {
                    reference = "videoData"
                }
            }
            done {
//                 new {
//                     name = "eVideoDetectAngle"
//                     channel = "internal"
//                 }
                new {
                    name = "eVideoDetectSmoke"
                    channel = "internal"
                }
                new {
                    name = "eVideoDetectCollision"
                    channel = "internal"
                }
                new {
                    name = "eVideoDetectPassenger"
                    channel = "internal"
                }
            }
        }
    }
    on {
        new {
            event = "eVideoDetectAngle"
            target = sVideoDetectAngle.name
            }
        new {
            event = "eVideoDetectSmoke"
            target = sVideoDetectSmoke.name
        }
        new {
            event = "eVideoDetectCollision"
            target = sVideoDetectCollison.name
        }
        new {
            event = "eVideoDetectPassenger"
            target = sVideoDetectPassenger.name
        }
    }
}

local sVideoDetectAngle: CSM.StateDescription = new {
    name = "videoDetectAngle"
    entry {
        new CSM.InvokeActionDescription {
            serviceType = stVideoDetectAngle
            isLocal = true
            input {
                videoContextVariableDescription
            }
            output {
                new {
                    reference = "videoAngle"
                }
            }
            done {
                new {
                    name = eVideoAngle
                    channel = "internal"
                }

                // trigger prepocess state ,but not realize now
                new {
                    name = "videoPreprocess"
                    channel = "internal"
                }
            }
        }
    }
    on {
        new {
            event = eVideoAngle
            guards {
                new CSM.GuardDescription {
                    expression = "\(vVideoAngle) == true"
                }
            }
            actions {
                new CSM.RaiseActionDescription {
                    event {
                        name = eVADetectAbnormal
                        channel = "global"
//                         data {
//                            vVideoAngle
//                         }
                    }
                }
            }
        }
    }
}

local sVideoDetectSmoke: CSM.StateDescription = new {
    name = "videoDetectSmoke"
    entry {
        new CSM.InvokeActionDescription {
            serviceType = stVideoDetectSmoke
            isLocal = true
            input {
                videoContextVariableDescription
            }
            output {
                new {
                    reference = "videoSmoke"
                }
            }
            done {
                new {
                    name = eVideoSmoke
                    channel = "internal"
                }

                // trigger prepocess state ,but not realize now
                new {
                    name = "videoPreprocess"
                    channel = "internal"
                }
            }
        }
    }
    on {
        new {
            event = eVideoSmoke
            guards {
                new CSM.GuardDescription {
                    expression = "\(vVideoSmoke) == true"
                }
            }
            actions {
                new CSM.RaiseActionDescription {
                    event {
                        name = eVSDetectAbnormal
                        channel = "global"
                        //                         data {
                        //                             don't have data now
                        //                         }
                    }
                }
            }
        }
    }
}

local sVideoDetectCollison: CSM.StateDescription = new {
    name = "videoDetectCollison"
    entry {
        new CSM.InvokeActionDescription {
            serviceType = stVideoDetectCollision
            input {
                videoContextVariableDescription
            }
            output {
                new {
                    reference = "videoCollision"
                }
            }
            done {
                new {
                    name = eVideoCollision
                    channel = "internal"
                }

                // trigger prepocess state ,but not realize now
                new {
                    name = "videoPreprocess"
                    channel = "internal"
                }
            }
        }
    }
    on {
        new {
            event = eVideoCollision
            guards {
                new CSM.GuardDescription {
                    expression = "\(vVideoCollision) == true"
                }
            }
            actions {
                new CSM.RaiseActionDescription {
                    event {
                        name = eVCDetectAbnormal
                        channel = "global"
                        //                         data {
                        //                             don't have data now
                        //                         }
                    }
                }
            }
        }
    }
}

local sVideoDetectPassenger: CSM.StateDescription = new {
    name = "videoDetectPassenger"
    entry {
        new CSM.InvokeActionDescription {
            serviceType = stVideoDetectPassenger
            input {
                videoContextVariableDescription
            }
            output {
                new {
                    reference = "videoPassenger"
                }
            }
            done {
                new {
                    name = eVideoPassenger
                    channel = "internal"
                }

                // trigger prepocess state ,but not realize now
                new {
                    name = "videoPreprocess"
                    channel = "internal"
                }
            }
        }
    }
    on {
        new {
            event = eVideoPassenger
            guards {
                new CSM.GuardDescription {
                    expression = "\(vVideoPassenger) != 0"
                }
            }
            actions {
                new CSM.RaiseActionDescription {
                    event {
                        name = eVPDetectAbnormal
                        channel = "global"
                        data {
                           videoPassengerContextVariableDescription
                        }
                    }
                }
            }
        }
    }
}

// ===== audio SM =====
local AudioSM: CSM.StateMachineDescription = new {
    name = "audio"
    localContext {
        variables {
            new {
                name = "audioData"
                value = "''"
            }
            new {
                name = "audioCollision"
                value = "false"
            }
            new {
                name = "audioPassenger"
                value = "0"
            }
        }
    }
    states {
        sAudioProcess
        sAudioDetectCollision
        sAudioDetectPassenger
    }
}

local sAudioProcess: CSM.StateDescription = new {
    name = "audioProcess"
    initial = true
    entry {
        new CSM.InvokeActionDescription {
            serviceType = stProcessAudio
            input {
                new {
                    name = "fileNumber"
                    value = "1"
                }
            }
            output {
                new {
                    reference = "audioData"
                }
            }
            done {
                new {
                    name = "eAudioDetectCollision"
                    channel = "internal"
                }
                new {
                    name = "eAudioDetectPassenger"
                    channel = "internal"
                }
            }
        }
    }
    on {
        new {
            event = "eAudioDetectCollision"
            target = sAudioDetectCollision.name
        }
        new {
            event = "eAudioDetectCollision"
            target = sAudioDetectPassenger.name
        }
    }
}

local sAudioDetectCollision: CSM.StateDescription = new {
    name = "audioDetectCollision"
    entry {
        new CSM.InvokeActionDescription {
            serviceType = stAudioDetectCollision
            input {
                audioContextVariableDescription
            }
            output {
                new {
                    reference = "audioCollision"
                }
            }
            done {
                new {
                    name = eAudioCollision
                    channel = "internal"
                }
            }
        }
    }
    on {
        new {
            event = eAudioCollision
            guards {
                new CSM.GuardDescription {
                    expression = "\(vAudioCollision) == true"
                }
            }
            actions {
                 new CSM.RaiseActionDescription {
                    event {
                        name = eACDetectAbnormal
                        channel = "global"
                        //                         data {
                        //                             don't have data now
                        //                         }
                    }
                }
            }
        }
    }
}

local sAudioDetectPassenger: CSM.StateDescription = new {
    name = "audioDetectPassenger"
    entry {
        new CSM.InvokeActionDescription {
            serviceType = stAudioDetectPassenger
            input {
                audioContextVariableDescription
            }
            output {
                new {
                    reference = "audioPassenger"
                }
            }
            done {
                new {
                    name = eAudioPassenger
                    channel = "internal"
                }
            }
        }
    }
    on {
        new {
            event = eAudioPassenger
            guards {
                new CSM.GuardDescription {
                    expression = "\(vAudioPassenger) != 0"
                }
            }
            actions {
                 new CSM.RaiseActionDescription {
                    event {
                        name = eAPDetectAbnormal
                        channel = "global"
                        data {
                            audioPassengerContextVariableDescription
                        }
                    }
                }
            }
        }
    }
}

// ===== temperature SM =====
local TemperatureSM: CSM.StateMachineDescription = new {
    name = "thermalMonitor"
    localContext {
        variables {
            new {
                name = "temperatureData"
                value = "''"
            }
            new {
                name = "ambientTemp"
                value = "0.0"
            }
        }
    }
    states {
        sReadTemperature
        sAssessFireRisk
    }
}
local sReadTemperature: CSM.StateDescription = new {
    name = "readTemp"
    initial = true
    entry {
        new CSM.InvokeActionDescription {
            serviceType = stReadTemperature
            input {
                new {
                    name = "fileNumber"
                    value = "1"
                }
            }
            output {
                new {
                    reference = "temperatureData"
                }
            }
            done {
                new {
                    name = "eTempUpdated"
                    channel = "internal"
                }
            }
        }
    }
    on {
        new {
            event = "eTempUpdated"
            target = sAssessFireRisk.name
        }
    }
}
local sAssessFireRisk: CSM.StateDescription = new {
    name = "fireRisk"
    entry {
        new CSM.InvokeActionDescription {
            serviceType = stAnalyzeTemperature
            input {
                temperatureContextVariableDescription
            }
            output {
                new {
                    reference = "ambientTemp"
                }
            }
            done {
                new {
                    name = eThermalCritical
                    channel = "global"
                }
            }
        }
    }
//     on {
//         new {
//             event = eThermalCritical
//             guards { new CSM.GuardDescription { expression = "$vAmbientTemp > 150" } }
//             target = sReadTemperature.name
//         }
//     }
}
// ===== 座位传感器状态机 =====
local SeatSM: CSM.StateMachineDescription = new {
    name = "seatMonitor"
    localContext {
        variables {
            new {
                name = "seatData"
                value = "''"
            }
            new {
                name = "doorStatus"
                value = "0.0"
            }
        }
    }
    states {
        sScanSeats        // 座位扫描
        sUpdateOccupancy  // 乘客统计
    }
}
local sScanSeats: CSM.StateDescription = new {
    name = "scan"
    initial = true
    entry {
        new CSM.InvokeActionDescription {
            serviceType = stReadSeat
            input {
                new {
                    name = "fileNumber"
                    value = "1"
                }
            }
            output {
                new {
                    reference = "seatData"
                }
            }
            done {
                new {
                    name = "eSeatDataReady"
                    channel = "internal"
                }
            }
        }
    }
    on {
        new {
            event = "eSeatDataReady"
            target = sUpdateOccupancy.name
        }
    }
}
local sUpdateOccupancy: CSM.StateDescription = new {
    name = "updateOccupancy"
    entry {
        new CSM.InvokeActionDescription {
            serviceType = stCheckSeatPressure
            input {
                seatContextVariableDescription
            }
            output {
                new {
                    reference = "occupantCount" } }
            done {
                new {
                    name = eSeatOccupancy
                    channel = "global"
                }
            }
        }
    }
}
// ===== 安全气囊状态机 =====
local AirbagSM: CSM.StateMachineDescription = new {
    name = "airbagController"
    localContext {
        variables {
            new {
                name = "airbagData"
                value = "''"
            }
            new {
                name = "airBagStatus"
                value = "false"
            }
        }
    }
    states {
        sMonitorDeployment
        sPostCrashAction
    }
}
local sMonitorDeployment: CSM.StateDescription = new {
    name = "monitor"
    initial = true
    entry {
        new CSM.InvokeActionDescription {
            serviceType = stReadAirbag
            input {
                new {
                    name = "fileNumber"
                    value = "1"
                }
            }
            output {
                new {
                    reference = "airBagData"
                }
            }
            done {
                new {
                    name = "airBagDataReady"
                }
            }
        }
    }
    on {
        new {
            event = "airBagDataReady"
            target = sPostCrashAction.name
        }
    }
}
local sPostCrashAction: CSM.StateDescription = new {
    name = "postCrash"
    entry {
        new CSM.InvokeActionDescription {
            serviceType = stDetectAirbag
            input {
                airbagContextVariableDescription
            }
            output {
                new {
                    reference = "airBagState"
                }
            }
            done {
                new {
                    name = eAirbagActivated
                    channel = "global"
                }
            }
        }
    }
}
// ===== 车门传感器状态机 =====
local DoorSM: CSM.StateMachineDescription = new {
    name = "doorIntegrity"
    localContext {
        variables {
            new {
                name = "doorData"
                value = "''"
            }
            new {
                name = "doorStatus"
                value = "0.0"
            }
        }
    }
    states {
        sCheckDoors      // 车门检查
        sAssessDamage    // 损伤评估
    }
}
local sCheckDoors: CSM.StateDescription = new {
    name = "check"
    initial = true
    entry {
        new CSM.InvokeActionDescription {
            serviceType = stReadDoor
            input {
                new {
                    name = "fileNumber"
                    value = "1"
                }
            }
            output {
                new {
                    reference = "doorData"
                }
            }
            done {
                new {
                    name = "eDoorStatusUpdated"
                    channel = "internal"
                }
            }
        }
    }
    on {
        new {
            event = "eDoorStatusUpdated"
            target = sAssessDamage.name
        }
    }
}
local sAssessDamage: CSM.StateDescription = new {
    name = "assessDamage"
    entry {
        new CSM.InvokeActionDescription {
            serviceType = stMonitorDoors
            input {
                doorContextVariableDescription
            }
            output {
                new {
                    reference = "doorState"
                }
            }
            done {
                new {
                    name = eDoorCompromised
                    channel = "global"
                }

            }
        }
    }
}

// ===== 传感器融合状态机 =====
local SensorFusionSM: StateMachineDescription = new {
    name = "SensorFusionCore"
    localContext {
        variables {
            // 最新传感器数据缓存
            new { name = "lastVideoAngle" value = "false" }
            new { name = "lastVideoSmoke" value = "false" }
            new { name = "lastVideoCollision" value = "false" }
            new { name = "lastVideoPassenger" value = "0" }
            new { name = "lastAudioCollision" value = "false" }
            new { name = "lastAudioPassenger" value = "0" }
        }
    }
    states {
        sMonitorEvents
        sClassifyAccident
    }
}

// ===== 状态1：持续监听事件 =====
local sMonitorEvents: StateDescription = new {
    name = "monitorEvents"
    initial = true
    on {
        // 监听所有视频相关异常事件
        new OnTransitionDescription {
            event = eVADetectAbnormal  // 视频角度异常
            actions {
                new AssignActionDescription {
                    variable = new ContextVariableDescription {
                        name = "lastVideoAngle"
                        value = "true"
                    }
                }
            }
            target = sClassifyAccident.name
        }
        new OnTransitionDescription {
            event = eVSDetectAbnormal  // 视频烟雾检测
            actions {
                new AssignActionDescription {
                    variable = new ContextVariableDescription {
                        name = "lastVideoSmoke"
                        value = "true"
                    }
                }
            }
            target = sClassifyAccident.name
        }
        new OnTransitionDescription {
            event = eVCDetectAbnormal  // 视频碰撞检测
            actions {
                new AssignActionDescription {
                    variable = new ContextVariableDescription {
                        name = "lastVideoCollision"
                        value = "true"
                    }
                }
            }
            target = sClassifyAccident.name
        }
        new OnTransitionDescription {
            event = eVPDetectAbnormal  // 视频受困人数
            actions {
                new AssignActionDescription {
                    variable = new ContextVariableDescription {
                        name = "lastVideoPassenger"
                        value = "$vVideoPassenger"
                    }
                }
            }
            target = sClassifyAccident.name
        }
        // 监听所有音频相关异常事件
        new OnTransitionDescription {
            event = eACDetectAbnormal  // 音频碰撞检测
            actions {
                new AssignActionDescription {
                    variable = new ContextVariableDescription {
                        name = "lastAudioCollision"
                        value = "true"
                    }
                }
            }
            target = sClassifyAccident.name
        }
        new OnTransitionDescription {
            event = eAPDetectAbnormal  // 音频受困人数
            actions {
                new AssignActionDescription {
                    variable = new ContextVariableDescription {
                        name = "lastAudioPassenger"
                        value = "$vAudioPassenger"
                    }
                }
            }
            target = sClassifyAccident.name
        }
    }
}

// ===== 状态2：事故分类 =====
local sClassifyAccident: StateDescription = new {
    name = "classifyAccident"
    entry {
        new CSM.MatchActionDescription {
            value = "accidentType"
            cases {
                // 优先级1：火灾（烟雾等级>8）
                new CSM.MatchCaseDescription {
                    `case` = "$lastVideoSmoke == true"
                    action = new RaiseActionDescription {
                        event = new EventDescription {
                            name = eFireDetected
                            channel = "global"
                        }
                    }
                }
                // 优先级2：碰撞确认（视频+音频双重验证）
                new CSM.MatchCaseDescription {
                    `case` = "$lastVideoCollision == true || $lastAudioCollision == true"
                    action = new RaiseActionDescription {
                        event = new EventDescription {
                            name = eCollisionConfirmed
                            channel = "global"
                        }
                    }
                }
                // 优先级3：侧翻风险（角度>70度）
                new CSM.MatchCaseDescription {
                    `case` = "$lastVideoAngle == true"
                    action = new RaiseActionDescription {
                        event = new EventDescription {
                            name = eRolloverRisk
                            channel = "global"
                        }
                    }
                }
                // 优先级4：人员计数异常（视频与音频差异>2）
                new CSM.MatchCaseDescription {
                    `case` = "abs($lastVideoPassenger - $lastAudioPassenger) > 2"
                    action = new RaiseActionDescription {
                        event = new EventDescription {
                            name = eOccupancyInjured
                            channel = "global"
//                             data {
//                                 new ContextVariableDescription {
//                                     name = "videoCount"
//                                     value = "$lastVideoPassenger"
//                                 }
//                                 new ContextVariableDescription {
//                                     name = "audioCount"
//                                     value = "$lastAudioPassenger"
//                                 }
//                             }
                        }
                    }
                }
                // 默认情况：无紧急事故
                new CSM.MatchCaseDescription {
                    `case` = "true"
                    action = new RaiseActionDescription {
                        event = new EventDescription {
                            name = "eNoEmergency"
                            channel = "internal"
                        }
                    }
                }
            }
        }
    }
    on {
        new  {
            event = "eNoEmergency"
            target = sMonitorEvents.name  // 返回监听状态
        }
    }
}


// ===== 救援协调状态机 =====
local rescueCoordinatorSM: CSM.StateMachineDescription = new {
    name = "rescueCoordinator"
    states {
        sNotifyEmergency   // 通知救援中心
    }
}

// --- 紧急通知 ---
local sNotifyEmergency: CSM.StateDescription = new {
    name = "notifyEmergency"
    initial = true
    on{
        new {
            event = eFireDetected
            actions {
                new CSM.InvokeActionDescription {
                    serviceType = stFireDepartment
                }
            }
             target = sNotifyEmergency.name
        }
        new {
            event = eCollisionConfirmed
            actions {
                new CSM.InvokeActionDescription {
                    serviceType = stPolice
                }
            }
             target = sNotifyEmergency.name
        }
        new {
            event = eRolloverRisk
            actions {
                new CSM.InvokeActionDescription {
                    serviceType = stPolice
                }
            }
             target = sNotifyEmergency.name
        }
         new {
            event = eOccupancyInjured
            actions {
                new CSM.InvokeActionDescription {
                    serviceType = stHospitalDepartment
                }
            }
             target = sNotifyEmergency.name
        }

    }
}

// ===== 车辆通信状态机 =====
local vehicleCommSM: CSM.StateMachineDescription = new {
    name = "vehicleComm"
    states {
        sBroadcastAlert // 广播警报
    }
}

// --- V2V广播 ---
local sBroadcastAlert: CSM.StateDescription = new {
    name = "broadcastAlert"
    initial = true
    on {
        new {
            event = eFireDetected
            actions {
                new CSM.InvokeActionDescription {
                    serviceType = stVToVCommunication
                }
            }
            // target = sNotifyEmergency.name
        }
        new {
            event = eCollisionConfirmed
            actions {
                new CSM.InvokeActionDescription {
                    serviceType = stVToVCommunication
                }
            }
             //target = sNotifyEmergency.name
        }
        new {
            event = eRolloverRisk
            actions {
                new CSM.InvokeActionDescription {
                    serviceType = stVToVCommunication
                }
            }
             //target = sNotifyEmergency.name
        }
         new {
            event = eOccupancyInjured
            actions {
                new CSM.InvokeActionDescription {
                    serviceType = stVToVCommunication
                }
            }
             //target = sNotifyEmergency.name
        }
    }
}


// ===== 紧急操作状态机 =====
local emergencyOpsSM: CSM.StateMachineDescription = new {
    name = "emergencyOps"
    states {
        sMonitor
        sUnlockDoor // fire, collision, rollover, injured
        sDisconnectFuelAndPower // fire
        sGuidanceForRescue //f
    }
}

local sMonitor: CSM.StateDescription = new {
    name = "monitor"
    initial = true
    on {
        new {
            event = eFireDetected
            actions {
                new CSM.InvokeActionDescription {
                    serviceType = stUnlockDoors
                }
                new CSM.InvokeActionDescription {
                    serviceType = stDisconnectPower
                }
                new CSM.InvokeActionDescription {
                    serviceType = stGuidanceRescue
                }
            }
            target = sMonitor.name
        }
        new {
            event = eCollisionConfirmed
            actions {
                new CSM.InvokeActionDescription {
                    serviceType = stUnlockDoors
                }
                new CSM.InvokeActionDescription {
                    serviceType = stGuidanceRescue
                }
            }
            target = sMonitor.name
        }
        new {
            event = eRolloverRisk
            actions {
                new CSM.InvokeActionDescription {
                    serviceType = stUnlockDoors
                }
                new CSM.InvokeActionDescription {
                    serviceType = stGuidanceRescue
                }
            }
            target = sMonitor.name
        }
         new {
            event = eOccupancyInjured
            actions {
                new CSM.InvokeActionDescription {
                    serviceType = stGuidanceRescue
                }
            }
            target = sMonitor.name
        }
    }
}

// --- 车门解锁序列 ---
local sUnlockDoor: CSM.StateDescription = new {
    name = "unlockDoor"
    entry {
        new CSM.InvokeActionDescription {
            serviceType = stUnlockDoors
        }
    }
}

// --- 火灾抑制 ---
local sDisconnectFuelAndPower: CSM.StateDescription = new {
    name = "disconnectFuelAndPowe"
    entry {
         new CSM.InvokeActionDescription {
            serviceType = stDisconnectPower
        }
    }
}

// --- 火灾抑制 ---
local sGuidanceForRescue: CSM.StateDescription = new {
    name = "guidanceForRescue"
    entry {
         new CSM.InvokeActionDescription {
            serviceType = stGuidanceRescue
        }
    }
}